// Code generated by MockGen. DO NOT EDIT.
// Source: compute.go
//
// Generated by this command:
//
//	mockgen -source=compute.go -destination=compute_mock.go -package compute
//

// Package compute is a generated GoMock package.
package compute

import (
	context "context"
	database "kv_db/internal/database"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// ParseQuery mocks base method.
func (m *MockParser) ParseQuery(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseQuery", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseQuery indicates an expected call of ParseQuery.
func (mr *MockParserMockRecorder) ParseQuery(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseQuery", reflect.TypeOf((*MockParser)(nil).ParseQuery), arg0, arg1)
}

// MockAnalyzer is a mock of Analyzer interface.
type MockAnalyzer struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyzerMockRecorder
}

// MockAnalyzerMockRecorder is the mock recorder for MockAnalyzer.
type MockAnalyzerMockRecorder struct {
	mock *MockAnalyzer
}

// NewMockAnalyzer creates a new mock instance.
func NewMockAnalyzer(ctrl *gomock.Controller) *MockAnalyzer {
	mock := &MockAnalyzer{ctrl: ctrl}
	mock.recorder = &MockAnalyzerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyzer) EXPECT() *MockAnalyzerMockRecorder {
	return m.recorder
}

// AnalyzeQuery mocks base method.
func (m *MockAnalyzer) AnalyzeQuery(arg0 context.Context, arg1 []string) (database.Query, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeQuery", arg0, arg1)
	ret0, _ := ret[0].(database.Query)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzeQuery indicates an expected call of AnalyzeQuery.
func (mr *MockAnalyzerMockRecorder) AnalyzeQuery(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeQuery", reflect.TypeOf((*MockAnalyzer)(nil).AnalyzeQuery), arg0, arg1)
}
