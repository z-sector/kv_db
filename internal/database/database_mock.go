// Code generated by MockGen. DO NOT EDIT.
// Source: database.go
//
// Generated by this command:
//
//	mockgen -source=database.go -destination=database_mock.go -package database
//

// Package database is a generated GoMock package.
package database

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockComputeLayer is a mock of ComputeLayer interface.
type MockComputeLayer struct {
	ctrl     *gomock.Controller
	recorder *MockComputeLayerMockRecorder
}

// MockComputeLayerMockRecorder is the mock recorder for MockComputeLayer.
type MockComputeLayerMockRecorder struct {
	mock *MockComputeLayer
}

// NewMockComputeLayer creates a new mock instance.
func NewMockComputeLayer(ctrl *gomock.Controller) *MockComputeLayer {
	mock := &MockComputeLayer{ctrl: ctrl}
	mock.recorder = &MockComputeLayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeLayer) EXPECT() *MockComputeLayerMockRecorder {
	return m.recorder
}

// HandleQuery mocks base method.
func (m *MockComputeLayer) HandleQuery(arg0 context.Context, arg1 string) (Query, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleQuery", arg0, arg1)
	ret0, _ := ret[0].(Query)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleQuery indicates an expected call of HandleQuery.
func (mr *MockComputeLayerMockRecorder) HandleQuery(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleQuery", reflect.TypeOf((*MockComputeLayer)(nil).HandleQuery), arg0, arg1)
}

// MockStorageLayer is a mock of StorageLayer interface.
type MockStorageLayer struct {
	ctrl     *gomock.Controller
	recorder *MockStorageLayerMockRecorder
}

// MockStorageLayerMockRecorder is the mock recorder for MockStorageLayer.
type MockStorageLayerMockRecorder struct {
	mock *MockStorageLayer
}

// NewMockStorageLayer creates a new mock instance.
func NewMockStorageLayer(ctrl *gomock.Controller) *MockStorageLayer {
	mock := &MockStorageLayer{ctrl: ctrl}
	mock.recorder = &MockStorageLayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageLayer) EXPECT() *MockStorageLayerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStorageLayer) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageLayerMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageLayer)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *MockStorageLayer) Get(ctx context.Context, key string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockStorageLayerMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageLayer)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockStorageLayer) Set(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStorageLayerMockRecorder) Set(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStorageLayer)(nil).Set), ctx, key, value)
}
